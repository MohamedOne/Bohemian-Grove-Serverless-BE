Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Environment:
      Variables:
        DDB_TABLE_NAME: 
          Ref: UserPostDataTbl
        COG_CLIENT_APPID: 
          Ref: CognitoAppClient
        S3_USER_BUCKET:
          Ref: UserImageStorage
        S3_POST_BUCKET:
          Ref: PostImageStorage    
  Api:
    BinaryMediaTypes:
      - multipart~1form-data
    Auth:
      Authorizers:
        BGCognito:
          AuthorizationScopes:
            - openid
            - aws.cognito.signin.user.admin
          UserPoolArn: 
            Fn::GetAtt: [ CognitoUserPool, Arn ]
      DefaultAuthorizer: BGCognito

Description: The AWS SAM template for the Bohemian Grove serverless backend.

Resources:
  # DynamoDB table
  UserPostDataTbl:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BG-Data
      KeySchema:
        - AttributeName: dataType
          KeyType: HASH
        - AttributeName: dataKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: userPost-index
          KeySchema:
            - AttributeName: userName
              KeyType: HASH
            - AttributeName: dataKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: dataType
          AttributeType: S
        - AttributeName: dataKey
          AttributeType: S
        - AttributeName: userName
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Cognito user pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: BG-Auth
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: false

  # Cognito app client
  CognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: BG-Auth-AppClient
      UserPoolId: 
        Ref: CognitoUserPool
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - https://eaxmple.com/callback

  # S3 buckets
  UserImageStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bg-user-images
      AccessControl: PublicRead    
     
  PostImageStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bg-post-images
      AccessControl: PublicRead

  # User lambdas
  CreateUserFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-CreateUser
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/CreateUserFn/CreateUser.handler
      Description: Creates a single user in the DynamoDB table.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Auth: 
              Authorizer: NONE
            Path: /user/{userName}
            Method: post
            RequestParameters:
              - method.request.path.userName
      Policies: AmazonS3FullAccess
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  GetUserFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-GetUser
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/GetUserFn/GetUser.handler
      Description: Gets a single user's information from the DynamoDB table.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{userName}
            Method: get
            RequestParameters:
              - method.request.path.userName
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  UpdateUserFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-UpdateUser
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/UpdateUserFn/UpdateUser.handler
      Description: Updates a single user's information in the DynamoDB table.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{userName}
            Method: put
            RequestParameters:
              - method.request.path.userName
      Policies: AmazonS3FullAccess
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  DeleteUserFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-DeleteUser
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/DeleteUserFn/DeleteUser.handler
      Description: Deletes a single user from the DynamoDB table.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{userName}
            Method: delete
            RequestParameters:
              - method.request.path.userName
      Policies: AmazonS3FullAccess
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  SearchUsersFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-SearchUsers
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/SearchUsersFn/SearchUsers.handler
      Description: Searches for all users matching a search term in the DynamoDB table.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/search/{searchTerm}
            Method: get
            RequestParameters:
              - method.request.path.searchTerm
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  FollowUnfollowFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-FollowUnfollow
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/FollowUnfollowFn/FollowUnfollow.handler
      Description: Follows or unfollows a user. 
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{userName}/follow
            Method: post
            RequestParameters:
              - method.request.path.userName
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  # Post lambdas
  CreatePostFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-CreatePost
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/CreatePostFn/CreatePost.handler
      Description: Creates a single post for a user.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post
            Method: post
      Policies: AmazonS3FullAccess
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  CreateCommentFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-CreateComment
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/CreateCommentFn/CreateComment.handler
      Description: Creates a single comment on a post.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post/{timeStamp}
            Method: post
            RequestParameters:
              - method.request.path.postId
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  GetPostFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-GetPost
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/GetPostFn/GetPost.handler
      Description: Get a single post and all of its comments.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post/{timeStamp}
            Method: get
            RequestParameters:
              - method.request.path.postId
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  GetGlobalFeedFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-GetGlobalFeed
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/GetGlobalFeedFn/GetGlobalFeed.handler
      Description: Gets the global feed.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post
            Method: get
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  GetUserFeedFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-GetUserFeed
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/GetUserFeedFn/GetUserFeed.handler
      Description: Gets the feed for a single user or a group of users.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post/user/{userName}
            Method: get
            RequestParameters:
              - method.request.path.userName
              - method.request.querystring.following
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  UpdatePostFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-UpdatePost
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/UpdatePostFn/UpdatePost.handler
      Description: Updates a single post.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post/{timeStamp}
            Method: put
            RequestParameters:
              - method.request.path.postId
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  LikeUnlikePostFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-LikeUnlikePost
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/LikeUnlikePostFn.handler
      Description: Toggles the 'like' status on a post for a user.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post/{postId}
            Method: patch
            RequestParameters:
              - method.request.path.postId
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  DeletePostFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-DeletePost
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/DeletePostFn/DeletePost.handler
      Description: Delete a single post.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post/{timeStamp}
            Method: delete
            RequestParameters:
              - method.request.path.postId
      Policies: AmazonS3FullAccess
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  DeleteCommentFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-DeleteComment
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/DeleteCommentFn/DeleteComment.handler
      Description: Delete a single comment on a post.
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /post/{timeStamp}/{commentStamp}
            Method: delete
            RequestParameters:
              - method.request.path.postId
              - method.request.path.commentId
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  # Test lambdas
  # TestS3Fn:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: BG-Test
  #     PackageType: Image
  #     ImageConfig:
  #       Command:
  #         - /bg/TestS3Fn/TestS3.handler
  #     Description: A lambda to be used as a test for S3 buckets.
  
  # Singular image lambda
  AddUserImgFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-AddUserImg
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/AddUserImgFn/AddUserImg.handler
      Description: Update user image
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{userName}/image
            Method: put
            RequestParameters:
              - method.request.path.userName
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  # Authentication lambdas
  SignInFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-SignIn
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/SignInFn/SignIn.handler
      Description: Returns authentication information from cognito
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Auth: 
              Authorizer: NONE
            Path: /auth/signin
            Method: post
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  SignUpFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BG-SignUp
      PackageType: Image
      ImageConfig:
        Command:
          - /bg/SignUpFn/SignUp.handler
      Description: Creates a new user in cognito
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Auth: 
              Authorizer: NONE
            Path: /auth/signup
            Method: post
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./
      DockerTag: Latest

  
